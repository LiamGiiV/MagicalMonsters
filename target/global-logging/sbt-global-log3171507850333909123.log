[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_261)
[debug]       Load.loadUnit: plugins took 460.2812ms
[debug]       Load.loadUnit: defsScala took 1.2747ms
[debug] [Loading] Scanning directory C:\Users\liam\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\liam\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 61.0327 ms
[debug]           Load.resolveProject(global-plugins) took 216.1505ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\liam\.sbt\1.0\plugins, plugins: List(<none>))) took 408.7936ms
[debug] [Loading] Done in C:\Users\liam\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 498.4781ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6722ms
[debug]     Load.loadUnit(file:/C:/Users/liam/.sbt/1.0/plugins/, ...) took 990.341ms
[debug]   Load.apply: load took 2116.9671ms
[debug]   Load.apply: resolveProjects took 36.1587ms
[debug]   Load.apply: finalTransforms took 331.6234ms
[debug]   Load.apply: config.delegates took 59.79ms
[debug]   Load.apply: Def.make(settings)... took 2732.904ms
[debug]   Load.apply: structureIndex took 563.5792ms
[debug]   Load.apply: mkStreams took 5.5989ms
[info] loading global plugins from C:\Users\liam\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 12214.2352ms
[debug]                 Load.loadUnit: plugins took 46.9842ms
[debug]                 Load.loadUnit: defsScala took 0.0071ms
[debug] [Loading] Scanning directory C:\Users\liam\Code\MagicalMonsters\project\project
[debug]                   Load.loadUnit: mkEval took 14.9503ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\liam\Code\MagicalMonsters\project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.1172 ms
[info] loading settings for project magicalmonsters-build-build from metals.sbt ...
[debug]                     Load.resolveProject(magicalmonsters-build-build) took 5.125ms
[debug]                   Load.loadTransitive: finalizeProject(Project(id magicalmonsters-build-build, base: C:\Users\liam\Code\MagicalMonsters\project\project, plugins: List(<none>))) took 10.1911ms
[debug] [Loading] Done in C:\Users\liam\Code\MagicalMonsters\project\project, returning: (magicalmonsters-build-build)
[debug]                 Load.loadUnit: loadedProjectsRaw took 3946.4339ms
[debug]                 Load.loadUnit: cleanEvalClasses took 6.204ms
[debug]               Load.loadUnit(file:/C:/Users/liam/Code/MagicalMonsters/project/project/, ...) took 4001.3475ms
[debug]             Load.apply: load took 4004.1647ms
[debug]             Load.apply: resolveProjects took 0.3204ms
[debug]             Load.apply: finalTransforms took 16.3674ms
[debug]             Load.apply: config.delegates took 0.9327ms
[debug]             Load.apply: Def.make(settings)... took 139.2826ms
[debug]             Load.apply: structureIndex took 45.779ms
[debug]             Load.apply: mkStreams took 0.0044ms
[info] loading project definition from C:\Users\liam\Code\MagicalMonsters\project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
