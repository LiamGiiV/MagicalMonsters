[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\liam\AppData\Local\Temp\idea11.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\liam\AppData\Local\Temp\idea11.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 17.0.1)
[debug]       Load.loadUnit: plugins took 278.180599ms
[debug]       Load.loadUnit: defsScala took 0.6723ms
[debug] [Loading] Scanning directory C:\Users\liam\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\liam\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 46.371 ms
[debug]           Load.resolveProject(global-plugins) took 130.8249ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\liam\.sbt\1.0\plugins, plugins: List(<none>))) took 242.866899ms
[debug] [Loading] Done in C:\Users\liam\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 307.9441ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.668ms
[debug]     Load.loadUnit(file:/C:/Users/liam/.sbt/1.0/plugins/, ...) took 611.5878ms
[debug]   Load.apply: load took 1048.3834ms
[debug]   Load.apply: resolveProjects took 14.044ms
[debug]   Load.apply: finalTransforms took 144.226301ms
[debug]   Load.apply: config.delegates took 17.7416ms
[debug]   Load.apply: Def.make(settings)... took 1160.431699ms
[debug]   Load.apply: structureIndex took 347.7278ms
[debug]   Load.apply: mkStreams took 3.559801ms
[info] loading global plugins from C:\Users\liam\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 6988.242ms
[debug]                 Load.loadUnit: plugins took 55.857ms
[debug]                 Load.loadUnit: defsScala took 0.0092ms
[debug] [Loading] Scanning directory C:\Users\liam\Code\MagicalMonsters\project\project
[debug]                   Load.loadUnit: mkEval took 10.7675ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\liam\Code\MagicalMonsters\project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.4116 ms
[info] loading settings for project magicalmonsters-build-build from metals.sbt ...
[debug]                     Load.resolveProject(magicalmonsters-build-build) took 5.044201ms
[debug]                   Load.loadTransitive: finalizeProject(Project(id magicalmonsters-build-build, base: C:\Users\liam\Code\MagicalMonsters\project\project, plugins: List(<none>))) took 9.470201ms
[debug] [Loading] Done in C:\Users\liam\Code\MagicalMonsters\project\project, returning: (magicalmonsters-build-build)
[debug]                 Load.loadUnit: loadedProjectsRaw took 244.366801ms
[debug]                 Load.loadUnit: cleanEvalClasses took 11.077599ms
[debug]               Load.loadUnit(file:/C:/Users/liam/Code/MagicalMonsters/project/project/, ...) took 313.2197ms
[debug]             Load.apply: load took 315.959401ms
[debug]             Load.apply: resolveProjects took 0.209201ms
[debug]             Load.apply: finalTransforms took 34.791801ms
[debug]             Load.apply: config.delegates took 0.8404ms
[debug]             Load.apply: Def.make(settings)... took 268.5494ms
[debug]             Load.apply: structureIndex took 109.149501ms
[debug]             Load.apply: mkStreams took 0.004899ms
[info] loading project definition from C:\Users\liam\Code\MagicalMonsters\project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]           Load.loadUnit: plugins took 1675.5013ms
[debug]           Load.loadUnit: defsScala took 0.009401ms
[debug] [Loading] Scanning directory C:\Users\liam\Code\MagicalMonsters\project
[debug]             Load.loadUnit: mkEval took 0.728201ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\liam\Code\MagicalMonsters\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(bloop.integrations.sbt.BloopPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(bloop.integrations.sbt.BloopPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,bloop.integrations.sbt.BloopPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 5.8612 ms
[info] loading settings for project magicalmonsters-build from metals.sbt,idea11.sbt ...
[debug]               Load.resolveProject(magicalmonsters-build) took 44.084801ms
[debug]             Load.loadTransitive: finalizeProject(Project(id magicalmonsters-build, base: C:\Users\liam\Code\MagicalMonsters\project, plugins: List(<none>))) took 51.328ms
[debug] [Loading] Done in C:\Users\liam\Code\MagicalMonsters\project, returning: (magicalmonsters-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 189.9641ms
[debug]           Load.loadUnit: cleanEvalClasses took 14.7884ms
[debug]         Load.loadUnit(file:/C:/Users/liam/Code/MagicalMonsters/project/, ...) took 1882.391699ms
[debug]       Load.apply: load took 1886.3418ms
[debug]       Load.apply: resolveProjects took 0.316001ms
[debug]       Load.apply: finalTransforms took 42.8851ms
[debug]       Load.apply: config.delegates took 0.8307ms
[debug]       Load.apply: Def.make(settings)... took 217.479901ms
[debug]       Load.apply: structureIndex took 111.370099ms
[debug]       Load.apply: mkStreams took 0.003799ms
[info] loading project definition from C:\Users\liam\Code\MagicalMonsters\project
[debug] Evaluating tasks: bloopInstall
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[success] Generated .bloop\magicalmonsters-build.json
[success] Total time: 2 s, completed Jun. 27, 2022, 5:06:19 p.m.
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 4720.439001ms
[debug]     Load.loadUnit: defsScala took 0.007199ms
[debug] [Loading] Scanning directory C:\Users\liam\Code\MagicalMonsters
[debug]       Load.loadUnit: mkEval took 0.7082ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(bloop.integrations.sbt.BloopPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(bloop.integrations.sbt.BloopPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,bloop.integrations.sbt.BloopPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.287399 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 102.855001ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\liam\Code\MagicalMonsters, plugins: List(<none>))) took 111.137201ms
[debug] [Loading] Done in C:\Users\liam\Code\MagicalMonsters, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 339.4344ms
[debug]     Load.loadUnit: cleanEvalClasses took 39.5268ms
[debug]   Load.loadUnit(file:/C:/Users/liam/Code/MagicalMonsters/, ...) took 5101.198999ms
[debug] Load.apply: load took 5104.8461ms
[debug] Load.apply: resolveProjects took 0.404199ms
[debug] Load.apply: finalTransforms took 45.1383ms
[debug] Load.apply: config.delegates took 0.578599ms
[debug] Load.apply: Def.make(settings)... took 140.4955ms
[debug] Load.apply: structureIndex took 61.0008ms
[debug] Load.apply: mkStreams took 0.0038ms
[info] set current project to MagicalMonsters (in build file:/C:/Users/liam/Code/MagicalMonsters/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54523 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54523, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to MagicalMonsters (in build file:/C:/Users/liam/Code/MagicalMonsters/)
[debug] > Exec(idea-shell, None, None)
